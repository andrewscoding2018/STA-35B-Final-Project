ggplot(mapping = aes(x = numberchildren)) + geom_histogram() +
labs(y = count, x = "Number of Children Attached per Case")
children %>% select(CASE_NUM, ID) %>% arrange(CASE_NUM) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram()
children %>% select(CASE_NUM, ID) %>% arrange(CASE_NUM) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1)
children %>% select(CASE_NUM, ID) %>% arrange(CASE_NUM) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 30)
children %>% select(CASE_NUM, ID) %>% arrange(CASE_NUM) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1)
children %>% select(CASE_NUM, ID) %>% arrange(CASE_NUM) %>% group_by(CASE_NUM) %>% mutate(NumberofChildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1)
children %>% select(CASE_NUM, ID) %>% arrange(CASE_NUM) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1)
children %>% select(CASE_NUM, ID) %>% arrange(CASE_NUM) %>% group_by(CASE_NUM) %>% summarize(mean(length(CASE_NUM)))
children %>% select(CASE_NUM, ID) %>% group_by(CASE_NUM) %>% summarize(mean(length(CASE_NUM)))
children %>% select(CASE_NUM, ID) %>% group_by(CASE_NUM) %>% summarize(mean(length(CASE_NUM)))
children %>% select(CASE_NUM, ID) %>% group_by(CASE_NUM) #%>% summarize(mean(length(CASE_NUM)))
children %>% select(CASE_NUM, ID) %>% group_by(CASE_NUM) #%>% summarize(mean(length(CASE_NUM)))
children %>% select(CASE_NUM, ID) %>% group_by(CASE_NUM) #%>% summarize(mean(length(CASE_NUM)))
children %>% select(CASE_NUM, ID) %>% arrange(CASE_NUM) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1)
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1)
children %>% select(CASE_NUM, ID) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>% ungroup_by(CASE_NUM) %>% summarize(mean(numberchildren))
children %>% select(CASE_NUM, ID) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>% ungroup(CASE_NUM) %>% summarize(mean(numberchildren))
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_point(aes(x = 2.243))
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(aes(numberchildren))
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(aes(numberchildren=mean(numberchildren)), size = 1, color = "red")
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(aes(numberchildren=mean(numberchildren)), size = 1)
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(aes(mean(numberchildren)), size = 1)
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(average = mean(numberchildren), size = 1)
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(average = mean(numberchildren), size = 1)
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(average = mean(length(ID)), size = 1)
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1)
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(xintercept = 2.43, size = 1)
averageNumber<- children %>% select(CASE_NUM, ID) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>% ungroup(CASE_NUM) %>% summarize(mean(numberchildren))
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(xintercept = averageNumber, size = 10, color = "red")
averageNumber<- children %>% select(CASE_NUM, ID) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>% ungroup(CASE_NUM) %>% summarize(mean(numberchildren))
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(xintercept = averageNumber, size = 10, color = "red")
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(xintercept = 2.43, size = 10, color = "red")
averageNumber<- children %>% select(CASE_NUM, ID) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>% ungroup(CASE_NUM) %>% summarize(mean(numberchildren))
children %>% select(CASE_NUM, ID) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>% ungroup(CASE_NUM) %>% summarize(mean(numberchildren))
number <- children %>% select(CASE_NUM, ID) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>% ungroup(CASE_NUM) %>% summarize(mean(numberchildren))
number
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(xintercept = number, size = 10, color = "red")
typeOf(number)
typeof(number)
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(xintercept = as.integer(number), size = 10, color = "red")
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(xintercept = as.numerical(number), size = 10, color = "red")
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(xintercept = as.numeric(number), size = 10, color = "red")
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(xintercept = as.numeric(number), size = 5, color = "red")
children
children %>% select(CASE_NUM,ID) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID))
children %>% select(CASE_NUM,ID) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren)
children %>% select(CASE_NUM,ID) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
children %>% select(CASE_NUM,ID) %>% group_by(CASE_NUM)# %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
children %>% select(CASE_NUM,ID) %>% group_by(ID)# %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
children %>% select(CASE_NUM,ID) %>% group_by(ID) %>% mutate(numcases = n())# %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(numcases = n())# %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n())# %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% arrange(childCaseCount)# %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% arrange(childCaseCount, descending = TRUE)# %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% summarize(max(childCaseCount))# %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% ungroup(ID) %>% arrange(childCaseCount)# %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% # %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
```
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) # %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) # %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% tally()# %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% tally() %>% arrange(# %>% mutate(numberchildren = length(ID)) %>% arrange(numberchildren, descending = TRUE)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% tally() %>% arrange(n)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) #%>% tally() %>% arrange(n)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n())
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% tally() # %>% arrange(n)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% tally() %>% arrange(n)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% tally() %>% arrange(n, descending = TRUE)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% tally() %>% slice(195444)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% tally() %>% slice(18357)
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% tally()
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% tally() %>% summarize(max(n))
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% tally() %>% summarize(max(n))
cases <- csvToDf("cases.csv")
csvToDf = function(v) {
return(as.data.frame(read.csv(v)))
}
cases <- csvToDf("cases.csv")
parents <- csvToDf("parents.csv")
children <- csvToDf("children.csv")
children <- csvToDf("children.csv")
payments <- csvToDf("payments.csv")
csvToDf(c("cases.csv", "parents.csv", "children.csv", "payments.csv"))
arguments <- csvToDf(c("cases.csv", "parents.csv", "children.csv", "payments.csv"))
c(cases, parents, children, payments) <- csvToDf(c("cases.csv", "parents.csv", "children.csv", "payments.csv"))
number <- children %>% select(CASE_NUM, ID) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>% ungroup(CASE_NUM) %>% summarize(mean(numberchildren))
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(xintercept = as.numeric(number), size = 5, color = "red")
library(tidyverse)
csvToDf = function(v) {
return(as.data.frame(read.csv(v)))
}
cases <- csvToDf("cases.csv")
parents <- csvToDf("parents.csv")
children <- csvToDf("children.csv")
payments <- csvToDf("payments.csv")
number <- children %>% select(CASE_NUM, ID) %>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>% ungroup(CASE_NUM) %>% summarize(mean(numberchildren))
children %>% select(CASE_NUM, ID)%>% group_by(CASE_NUM) %>% mutate(numberchildren = length(ID)) %>%
ggplot(mapping = aes(x = numberchildren)) + geom_histogram(binwidth = 1) + geom_vline(xintercept = as.numeric(number), size = 5, color = "red")
children %>% select(ID, CASE_NUM) %>% group_by(ID) %>% mutate(childCaseCount = n()) %>% tally() %>% summarize(max(n))
# Gets all the unique AP_IDs from the payments data file
payments_AP_ID <- payments %>% select(AP_ID) %>% arrange() %>% pull()
payments_AP_ID <- unique(payments_AP_ID)
# Gets all the unique AP_IDs from the payments data file
parents_AP_ID <- parents %>% select(AP_ID) %>% arrange() %>% pull()
parents_AP_ID <- unique(parents_AP_ID)
# Checks if AP_IDs are identical
identical(payments_AP_ID, parents_AP_ID)
payments
payments-short <- payments %>% slice(10000)
payments.short <- payments %>% slice(10000)
payments.short
payments.short <- payments %>% slice(10000)
payments.short
payments.short <- payments %>% slice(1:100)
payments.short
as.factor(payments.short)
as.factor(payments.short, PYMNT_SRC)
payments.short %>% table(PYMNT_SRC)
payments.short %>% table(payments.short$PYMNT_SRC)
payments.short <- payments %>% slice(1:100)
payments.short
as.factor(payments.short)
payments.short <- payments %>% slice(1:100)
as.factor(payments.short$PYMNT_SRC)
as.factor(payments$PYMNT_SRC)
levels(as.factor(payments$PYMNT_SRC))
typeof(levels(as.factor(payments$PYMNT_SRC)))
levels(as.factor(payments$PYMNT_SRC))
src_factor <- as.factor(payments$PYMNT_SRC)
src_levels <- levels(src_factor)
"A" %in% src_factor
all("A" %in% src_factor)
which("A" %in% src_factor)
"A" %in% src_factor
which("A" %in% src_factor)
which("A" %in% payments)
which("A" %in% payments.short)
payments.short <- payments %>% slice(1:10000)
payments.short <- payments %>% slice(1:4500)
which("A" %in% payments.short)
which("W" %in% payments.short)
payments.short <- payments$PYMNT_SRC %>% slice(1:4500)
payments.short <- payments %>% slice(1:4500)
which("W" %in% payments.short$PYMNT_SRC)
which(all("W" %in% payments.short$PYMNT_SRC))
which("W" %in% payments.short$PYMNT_SRC)
which("A" %in% payments.short$PYMNT_SRC)
payments.short
payments.short$PYMNT_SRC
which("A" %in% payments.short$PYMNT_SRC)
which("A" %in% payments.short$PYMNT_SRC)
a <- c('A','B','C','D','E')
b <- c('C','D')
which(a %in% b)
payments.short$PYMNT_SRC
a <- c('A','B','C','D','E')
a
which(payments.short$PYMNT_SRC %in% "A")
payments.short$PYMNT_SRC %in% "A"
sum(payments.short$PYMNT_SRC %in% "A")
src_levels
for(level in src_levels){
if(sum(payments$PYMNT_SRC %in% "level") < 100){
print("Less than 100")
}
}
print(level + "Less than 100")
print(level, "Less than 100")
for(level in src_levels){
if(sum(payments$PYMNT_SRC %in% "level") < 100){
print(level, "Less than 100")
}
}
for(level in src_levels){
if(sum(payments$PYMNT_SRC %in% "level") < 100){
print(Level)
print("Less than 100")
}
}
for(level in src_levels){
if(sum(payments$PYMNT_SRC %in% "level") < 100){
print(level)
print("Less than 100")
}
}
for(level in src_levels){
if(sum(payments$PYMNT_SRC %in% "level") < 15){
print(level)
print("Less than 100")
}
}
for(level in src_levels){
if(sum(payments$PYMNT_SRC %in% "level") < 15){
print(level)
print("Less than 15")
}
}
for(level in src_levels){
if(sum(payments$PYMNT_SRC %in% "level") < 100){
print(sum(payments$PYMNT_SRC))
}
}
for(level in src_levels){
if(sum(payments$PYMNT_SRC %in% "level") < 100){
print(as.character(sum(payments$PYMNT_SRC)))
}
}
for(level in src_levels){
if(sum(payments$PYMNT_SRC %in% level) < 100){
print(sum(payments$PYMNT_SRC))
}
}
for(level in src_levels){
if(sum(payments$PYMNT_SRC %in% level) < 100){
print(sum(level))
}
}
for(level in src_levels){
if(sum(payments$PYMNT_SRC %in% level) < 100){
print(level)
}
}
pool_categories = function(variable, min){
variable_factor <- as.factor(variable)
variable_levels <- levels(src_factor)
for(level in variable_levels){
if(sum(variable %in% level) < 100){
print(level)
}
}
return()
}
pool_categories(payments$PYMNT_SRC, 100)
src_factor
payments.short <- payments %>% slice(1:1000)
src_factor <- as.factor(payments$PYMNT_SRC)
src_levels <- levels(src_factor)
for(level in src_levels){
if(sum(payments$PYMNT_SRC %in% level) < 100){
print(level)
}
}
pool_categories = function(variable, min){
variable_factor <- as.factor(variable)
variable_levels <- levels(src_factor)
for(level in variable_levels){
if(sum(variable %in% level) < 100){
print(level)
}
}
return()
}
src_factor
payments.short <- payments %>% slice(1:1000)
src_factor <- as.factor(payments.short$PYMNT_SRC)
src_levels <- levels(src_factor)
for(level in src_levels){
if(sum(payments$PYMNT_SRC %in% level) < 100){
print(level)
}
}
pool_categories = function(variable, min){
variable_factor <- as.factor(variable)
variable_levels <- levels(src_factor)
for(level in variable_levels){
if(sum(variable %in% level) < 100){
print(level)
}
}
return()
}
src_factor
table(src_factor)
src_factor["F"]
src_factor[F]
src_factor[I]
src_factor["I"]
table(src_factor)
src_factor[1]
src_factor[2]
src_factor[3]
src_factor[4]
A <- c("A", "A", "B", "C", "D", "D", "D")
A_factor <- as.factor(A)
A_factor
A <- c("A", "A", "B", "C", "D", "D", "D", "E", "E", "E")
A_factor <- as.factor(A)
A_factor
levels(A_factor) <- c(levels(A_factor),"new_level")
A_factor
A_factor(which(A_factor == "A")) <- "other"
A_factor[which(A_factor == "A")] <- "other"
levels(A_factor) <- c(levels(A_factor),"new_level")
A_factor[which(A_factor == "A")] <- "other"
A_factor
A_factor[which(A_factor == "A")] <- "new_level"
A_factor
A <- c("A", "A", "B", "C", "D", "D", "D", "E", "E", "E")
A_factor <- as.factor(A)
A_factor
A_factor
levels(A_factor) <- c(levels(A_factor),"new_level")
A_factor[which(A_factor == "A")] <- "new_level"
A_factor
A <- c("A", "A", "B", "C", "D", "D", "D", "E", "E", "E")
A_factor <- as.factor(A)
A_factor
levels(A_factor) <- c(levels(A_factor),"other")
A_factor[which(A_factor == "A")] <- "other"
A_factor
return(as.factor(var.copy))
pool_categories = function(variable, min){
var.copy <- variable
var_factor <- as.factor(var.copy)
var_levels <- levels(src_factor)
levels(var_factor) <- c(levels(var_factor), "other")
for(level in var_levels){
if(sum(var.copy %in% level) < min){
var.copy[which(variable == level)] <- "other"
}
}
return(as.factor(var.copy))
}
pool_categories(payments.short$PYMNT_SRC, 10)
pool_categories(payments.short$PYMNT_SRC, 1000)
pool_categories(payments.short$PYMNT_SRC, 150)
pool_categories(payments.short$PYMNT_SRC, 3)
pool_categories = function(variable, min){
var.copy <- variable
var_factor <- as.factor(var.copy)
var_levels <- levels(var.copy)
levels(var_factor) <- c(levels(var_factor), "other")
for(level in var_levels){
if(sum(var.copy %in% level) < min){
var.copy[which(variable == level)] <- "other"
}
}
return(as.factor(var.copy))
}
pool_categories(payments.short$PYMNT_SRC, 3)
pool_categories(payments.short$PYMNT_SRC, 10)
pool_categories(payments.short$PYMNT_SRC, 1000)
pool_categories(payments.short$PYMNT_SRC,1000)
pool_categories = function(variable, min){
var.copy <- variable
var_factor <- as.factor(var.copy)
var_levels <- levels(src_factor)
levels(var_factor) <- c(levels(var_factor), "other")
for(level in var_levels){
if(sum(var.copy %in% level) < min){
var.copy[which(variable == level)] <- "other"
}
}
return(as.factor(var.copy))
}
pool_categories(payments.short$PYMNT_SRC, 3)
pool_categories = function(variable, min){
var.copy <- variable
var_factor <- as.factor(var.copy)
var_levels <- levels(var_factor)
levels(var_factor) <- c(levels(var_factor), "other")
for(level in var_levels){
if(sum(var.copy %in% level) < min){
var.copy[which(variable == level)] <- "other"
}
}
return(as.factor(var.copy))
}
pool_categories(payments.short$PYMNT_SRC, 3)
pool_categories(payments.short$PYMNT_SRC, 100)
payments.short <- payments %>% slice(1:1000)
pool_categories = function(variable, min){
var.copy <- variable
var_factor <- as.factor(var.copy)
var_levels <- levels(var_factor)
levels(var_factor) <- c(levels(var_factor), "other")
for(level in var_levels){
if(sum(var.copy %in% level) < min){
var.copy[which(variable == level)] <- "other"
}
}
return(as.factor(var.copy))
}
pool_categories(payments.short$PYMNT_SRC, 100)
namesList <- paste("Other", 1:10)
namesList
namesList[1]
nameUse <- ""
pool_categories = function(variable, min){
nameUse <- "";
var.copy <- variable
var_factor <- as.factor(var.copy)
var_levels <- levels(var_factor)
if(var_levels %in% "Other"){
nameUse <- "Other1"
} else{
nameUse <- "Other"
}
levels(var_factor) <- c(levels(var_factor), nameUse)
for(level in var_levels){
if(sum(var.copy %in% level) < min){
var.copy[which(variable == level)] <- nameUse
}
}
return(as.factor(var.copy))
}
pool_categories(payments.short$PYMNT_SRC, 100)
pool_categories(payments.short$PYMNT_SRC, 100)
if(var_levels %in% "Other" == TRUE){
nameUse <- "Other1"
} else{
nameUse <- "Other"
}
pool_categories(payments.short$PYMNT_SRC, 100)
pool_categories = function(variable, min){
nameUse <- "Other";
var.copy <- variable
var_factor <- as.factor(var.copy)
var_levels <- levels(var_factor)
if(var_levels %in% "Other" == TRUE){
nameUse <- "Other1"
}
levels(var_factor) <- c(levels(var_factor), nameUse)
for(level in var_levels){
if(sum(var.copy %in% level) < min){
var.copy[which(variable == level)] <- nameUse
}
}
return(as.factor(var.copy))
}
pool_categories(payments.short$PYMNT_SRC, 100)
as.factor(payments.short$PYMNT_SRC)
(levels(paymentFactor) %in% "Other")
paymentFactor <- as.factor(payments.short$PYMNT_SRC)
(levels(paymentFactor) %in% "Other")
(levels(paymentFactor) %in% "Other" == TRUE)
((levels(paymentFactor) %in% "Other" == TRUE))
((which(levels(paymentFactor) %in% "Other")))
((which(levels(paymentFactor) %in% "A")))
((which(levels(paymentFactor) %in% "")) == TRUE)
((which(levels(paymentFactor) %in% "A")) == TRUE)
((which(levels(paymentFactor) %in% "A")) == FALSE)
((which(levels(paymentFactor) %in% "Other")) == FALSE)
((which(levels(paymentFactor) %in% "Other")) == TRUE)
length(which(levels(paymentFactor) %in% "Other"))
if(length(which(var_levels %in% "Other")) != 0){
nameUse <- "Other1"
}
pool_categories(payments.short$PYMNT_SRC, 100)
pool_categories = function(variable, min){
nameUse <- "Other";
var.copy <- variable
var_factor <- as.factor(var.copy)
var_levels <- levels(var_factor)
if(length(which(var_levels %in% "Other")) != 0){
nameUse <- "Other1"
}
levels(var_factor) <- c(levels(var_factor), nameUse)
for(level in var_levels){
if(sum(var.copy %in% level) < min){
var.copy[which(variable == level)] <- nameUse
}
}
return(as.factor(var.copy))
}
pool_categories(payments.short$PYMNT_SRC, 100)
pool_categories(payments$PYMNT_SRC, 100)
pool_categories = function(variable, min){
nameUse <- "Other";
var.copy <- variable
var_factor <- as.factor(var.copy)
var_levels <- levels(var_factor)
if(length(which(var_levels %in% "Other")) != 0)nameUse <- "Other1";
levels(var_factor) <- c(levels(var_factor), nameUse)
for(level in var_levels){
if(sum(var.copy %in% level) < min){
var.copy[which(variable == level)] <- nameUse
}
}
return(as.factor(var.copy))
}
pool_categories(payments$PYMNT_SRC, 100)
payments.short <- payments %>% slice(1:1000)
pool_categories(payments.short$PYMNT_SRC, 100)
